#include <stdlib.h>
#include <time.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>

#define UP 2
#define DOWN 4

uint8_t up_pressed = 0;// up_pressed = false;

//state: 0 = decreasing, 1 = increasing, 2 = stopped (as per homebridge -> windowCovering doc)
uint8_t state = 2;
//position: 0-100 = percentage covering (0 = closed, all the way down)
uint8_t current_position = 0;
uint8_t target_position = 0;

double end_time;
clock_t time_of_new_command;

//if true connects to an existing network
//if false creates a new hotspot

//the credentials of the existing network(if applicable)
const char *existing_ssid = "TP-Link_B87B";
const char *existing_password = "82514778";

WiFiServer server(80);

//Sets up a static IP address making your URL contant
//which saving you the hassle of finding the IP address
//everytime you want to connect

// Set your Static IP address
IPAddress local_IP(192, 168, 0, 102);
// Set your Gateway IP address
IPAddress gateway(192, 168, 0, 1);

IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8); // optional
IPAddress secondaryDNS(8, 8, 4, 4); // optional

const int buffer_size = 100;
char str[50];
char code_word[10] = "command:";
unsigned long code;

/*Sets up program. Connects to wifi or creates a hotspot*/
void setup() {
  Serial.begin(9600);

  Serial.println();
  Serial.println("Configuring access point...");

  // Configures static IP address
  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("STA Failed to configure");
  }

  WiFi.begin(existing_ssid, existing_password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.print("AP IP address: ");
  Serial.println(WiFi.localIP());
  Serial.println(WiFi.macAddress());

  server.begin();

  Serial.println("Server started");

  //IrSender.begin(UP, ENABLE_LED_FEEDBACK); // Specify send pin and enable feedback LED at default feedback LED pin

  Serial.print("Ready to send command at pin ");
  Serial.println(UP);

  pinMode(UP, OUTPUT);
  pinMode(DOWN, OUTPUT);
}

/*checks for messages over wifi*/
void check_wifi() {
  WiFiClient client = server.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        String response = "NaN";
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/plain");
            client.println();
            client.println(response);

            // The HTTP response ends with another blank line:
            client.println();

            // break out of the while loop:
            break;
          } else {//reached the end of the line
            //if the line is a GET request(excluding a request for the icon)
            //incomign options:
            //GET /blinds/getposition
            //GET /blinds/getstate
            //POST /blinds/set/%position%
            //GET /speaker/on
            //GET /speaker/off
            //GET /speaker/vup
            //GET /speaker/vdown
            if (currentLine.startsWith("GET /") &&  !currentLine.startsWith("GET /favicon.ico")) {
              String m = currentLine.substring(5);
              //aux func
              Serial.println(m);

              //blinds
              if (m.startsWith("blinds"))
              {
                String mid = m.substring(7);
                Serial.println(mid);

                if (mid.startsWith("getposition")) {
                  response = "%d" + current_position;
                  return;
                }
                else if (mid.startsWith("getstate")) {
                  response = "%d" + state;
                  return;
                }
              }

              //speaker
              else if (m.startsWith("speaker"))
              {
                String mid = m.substring(8);
                Serial.println(mid);
              }

            }
            else if (currentLine.startsWith("POST /")) { // "post /blinds/set/%pos%"
              String pos = currentLine.substring(17);
              const char* position = pos.c_str();
              target_position = atoi(position);
              time_of_new_command = clock();
              end_time = ((double)clock()) / CLOCKS_PER_SEC + (abs(target_position - current_position) / 100) * 18.78;
            }
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
  }
}

void update_blinds(uint8_t t) {
  if (end_time < ((double)clock()) / CLOCKS_PER_SEC) {
    //end is in the past > stop!
    state = 2;
    current_position = target_position; //TODO: make it smooth
    digitalWrite(UP, 0);
    digitalWrite(DOWN, 0);
    return;
  }

  if (t == 0)
  {
    //down
    digitalWrite(UP, 0);
    digitalWrite(DOWN, 1);
  } else if (t == 1)
  {
    //up
    digitalWrite(DOWN, 0);
    digitalWrite(UP, 1);
  }
}


/*the main loop*/
void loop() {
  check_wifi();


  //check blinds position
  if (target_position == current_position)
  {
    state = 2; //stopped
    digitalWrite(DOWN, 0);
    digitalWrite(UP, 0);
  }
  else if (target_position < current_position) {
    //t = 20, c = 50, 100 open, 0 closed
    //needs to go down
    if (state != 0)
    {
      //if its not alr going down
      state = 0; // decreasing
      update_blinds(0);
    }
    current_position = current_position - (((double)clock() - time_of_new_command) / CLOCKS_PER_SEC) / 0.1887;
  }
  else if (target_position > current_position) {
    //t = 20, c = 50, 100 open, 0 closed
    //needs to go up
    if (state != 1)
    {
      //if its not alr going up
      state = 1; // increasing
      update_blinds(1);
    }
    current_position = current_position + (((double)clock() - time_of_new_command) / CLOCKS_PER_SEC) / 0.1887;
  }
}

/*

  logic behind blinds up/down

  it takes on avg 18.78sec to go 0-100 (or 100->0) hence we want to move (math.abs(target - current) / 100)* 18.78
  that is, if we need to move to fully open from fully closed: 100-0 = 100 /100 = 1 * 18.78sec

*/